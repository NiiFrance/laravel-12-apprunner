name: Build Docker Images
on:
  workflow_run:
    workflows: [Run Tests]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install NPM
        working-directory: iac
        run: |
          npm install

      - name: Install CDK
        run: |
          npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup ECR Repository
        working-directory: iac
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID}}
        run: |
          cp .env.example .env
          sed -i "s/\bAWS_ACCOUNT_ID\b/${AWS_ACCOUNT_ID}/g" .env
          cat .env

          cdk deploy EcrStack --require-approval=never

      - name: Get ECR Repository name
        id: get-ecr-repository-name
        run: |
          # Get the Ecr repository name from CloudFormation outputs and set it as an environment variable
          ECR_REPOSITORY_NAME=$(aws cloudformation describe-stacks \
            --stack-name EcrStack \
            --query 'Stacks[0].Outputs[?OutputKey==`RepositoryNameOutput`].OutputValue' \
            --output text)
          echo "ECR_REPOSITORY_NAME=$ECR_REPOSITORY_NAME" >> $GITHUB_OUTPUT

      - name: Build and push image to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ steps.get-ecr-repository-name.outputs.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_NAME: laravel-12-apprunner-web
        run: |
          echo $IMAGE_NAME $REGISTRY/$REPOSITORY
          docker build -t $IMAGE_NAME .

          docker tag $IMAGE_NAME $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker tag $IMAGE_NAME $REGISTRY/$REPOSITORY:latest

          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest
